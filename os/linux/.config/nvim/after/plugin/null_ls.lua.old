-- import null-ls plugin safely
local setup, null_ls = pcall(require, "null-ls")
if not setup then
	return
end

local status_ok, mason_null_ls = pcall(require, "mason-null-ls")
if not status_ok then
	return
end

local mason_update_ok, mason_update_all = pcall(require, "mason-update-all")
if not mason_update_ok then
	return
end

-- for conciseness
local formatting = null_ls.builtins.formatting -- to setup formatters
local diagnostics = null_ls.builtins.diagnostics -- to setup linters

-- to setup format on save
local augroup = vim.api.nvim_create_augroup("LspFormatting", {})

-- mason update all
-- Events message update all lsp servers mason installed
local update_message = vim.api.nvim_create_autocmd("User", {
	pattern = "MasonUpdateAllComplete",
	callback = function()
		print("mason-update-all has finished!")
	end,
})
mason_update_all.setup({
	update_message,
})

-- configure mason_null_ls
mason_null_ls.setup({
	ensure_installed = {
		"black",
		"djlint",
		"eslint_d",
		"prettier",
		"stylua",
		"sql_formatter",
	},
	automatic_installation = true,
})

-- configure null_ls
null_ls.setup({
	-- setup formatters & linters
	sources = {
		--  to disable file types use
		--  "formatting.prettier.with({disabled_filetypes: {}})" (see null-ls docs)
		formatting.prettier.with({ extra_args = { "--single-quote", "--jsx-single-quote" } }), --formatting JS/TS (install -> npm i -g prettier)
		formatting.stylua, -- formatting lua (install -> sudo pacman -S stylua)
		diagnostics.eslint_d.with({ -- js/ts linter
			-- only enable eslint if root has .eslintrc.js (not in youtube nvim video)
			condition = function(utils)
				return utils.root_has_file(".eslintrc.js") -- change file extension if you use something else
			end,
		}),
		formatting.black.with({ extra_args = { "--fast" } }), --format python (install -> pip3 install black)
		formatting.djlint.with({ extra_args = { "$FILENAME", "--reformat", "--lint" } }), --formatting {django, jinja.html, htmldjango} (install -> pip3 install djlint or npm i -g djlint)
		--formatting.djhtml.with({ extra_args = { "-t=2" } }), --formatting {django, jinja.html, htmldjango} (install -> pip install djhtml)
		formatting.sql_formatter.with({}), --formatting sql (install -> npm install -g sql-formatter)
	},
	-- configure format on save
	on_attach = function(current_client, bufnr)
		if current_client.supports_method("textDocument/formatting") then
			vim.api.nvim_clear_autocmds({ group = augroup, buffer = bufnr })
			vim.api.nvim_create_autocmd("BufWritePre", {
				group = augroup,
				buffer = bufnr,
				callback = function()
					vim.lsp.buf.format({
						filter = function(client)
							--  only use null-ls for formatting instead of lsp server
							return client.name == "null-ls"
						end,
						bufnr = bufnr,
					})
				end,
			})
		end
	end,
})
