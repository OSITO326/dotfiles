#!/bin/python

import requests
import os
import json
import argparse
import math

CITY = "3919968"
API_KEY = ""  # Your API here
UNITS = "Metric"
UNIT_KEY = "C"
LANG = "es"

REQ = requests.get(
    f"http://api.openweathermap.org/data/2.5/weather?id={CITY}&lang={LANG}&appid={API_KEY}&units={UNITS}"
)


def obtener_datos_climaticos():
    try:
        response = requests.get(
            f"http://api.openweathermap.org/data/2.5/weather?id={CITY}&lang={LANG}&appid={API_KEY}&units={UNITS}"
        )

        # Verificar si la petición fue exitosa
        if response.status_code == 200:
            # Parsear el contenido de la respuesta en formato JSON
            data = response.json()

            # Extraer los datos específicos necesarios
            result = {
                "city": data["name"],
                "temperature": data["main"]["temp"],
                "feels_like": data["main"]["feels_like"],
                "humidity": data["main"]["humidity"],
                "id": data["weather"][0]["id"],
                "icon": data["weather"][0]["icon"],
                "main": data["weather"][0]["main"],
                "description": data["weather"][0]["description"],
                "country": data["sys"]["country"],
            }

            return result
        else:
            print(f"Error en la petición: {response.status_code}")
            return None

    except requests.exceptions.RequestException as e:
        # Manejo de excepciones en caso de error en la solicitud
        print(f"Error al realizar la petición: {e}")
        return None


def guardar_datos_en_cache(data):
    # Definir el directorio y el archivo de destino
    home_dir = os.path.expanduser("~")
    cache_dir = os.path.join(home_dir, ".cache/eww/weather")
    cache_file = os.path.join(cache_dir, "weather.json")

    # Crear el directorio si no existe
    os.makedirs(cache_dir, exist_ok=True)

    # Guardar los datos en el archivo JSON
    with open(cache_file, "w") as f:
        json.dump(data, f, ensure_ascii=False, indent=4)

    print(f"Datos guardados en {cache_file}")


def get_cache_file_path():
    # Definir el archivo de destino
    home_dir = os.path.expanduser("~")
    return os.path.join(home_dir, ".cache/eww/weather/weather.json")


def printTemperature():
    # Leer los datos del archivo JSON
    cache_file = get_cache_file_path()

    try:
        with open(cache_file, "r") as f:
            data = json.load(f)

        # Obtener temperature
        temperature = data.get("temperature")

        # Redondear hacia abajo temperature
        if temperature is not None:
            temperature = math.floor(temperature)

        # Imprimir temperature en el formato deseado
        print(f"{temperature}°C")
    except FileNotFoundError:
        print("El archivo JSON no se encuentra.")
    except json.JSONDecodeError:
        print("Error al leer el archivo JSON.")


def printCityCountry():
    # Leer los datos del archivo JSON
    cache_file = get_cache_file_path()

    # Leer los datos del archivo JSON
    try:
        with open(cache_file, "r") as f:
            data = json.load(f)

        # Obtener city y country
        city = data.get("city")
        country = data.get("country")

        # "BO" to "Bolivia"
        if country == "BO":
            country = "Bolivia"

        # Imprimir city y country
        print(f"{city}, {country}")
    except FileNotFoundError:
        print("El archivo JSON no se encuentra.")
    except json.JSONDecodeError:
        print("Error al leer el archivo JSON.")


def printExtraStats():
    # Leer los datos del archivo JSON
    cache_file = get_cache_file_path()

    # Leer los datos del archivo JSON
    try:
        with open(cache_file, "r") as f:
            data = json.load(f)

        # Obtener feels_like y humidity
        feels_like = data.get("feels_like")
        humidity = data.get("humidity")

        # Redondear hacia abajo feels_like
        if feels_like is not None:
            feels_like = math.floor(feels_like)

        tab = "  "
        # Imprimir feels_like y humidity
        print(f"SENSACIÓN:\n {tab}\uf2c7 {feels_like}°C")
        print(f"HUMEDAD:\n {tab}\uf043 {humidity}%")
    except FileNotFoundError:
        print("El archivo JSON no se encuentra.")
    except json.JSONDecodeError:
        print("Error al leer el archivo JSON.")


def printDescription():
    # Leer los datos del archivo JSON
    cache_file = get_cache_file_path()

    try:
        with open(cache_file, "r") as f:
            data = json.load(f)

        # Obtener la descripción del clima
        weather_desc = data.get("description").capitalize()

        # Imprimir description
        print(f"{weather_desc}")
    except FileNotFoundError:
        print("El archivo JSON no se encuentra.")
    except json.JSONDecodeError:
        print("Error al leer el archivo JSON.")


def printWeatherIcon():
    # Leer los datos del archivo JSON
    cache_file = get_cache_file_path()

    icons = {
        # Group 2xx: Thunderstorm
        "200-11d": "",
        "201-11d": "",
        "202-11d": "",
        "210-11d": "",
        "211-11d": "",
        "212-11d": "",
        "221-11d": "",
        "230-11d": "",
        "231-11d": "",
        "232-11d": "",
        # Group 3xx: Drizzle
        "300-09d": "",
        "301-09d": "",
        "302-09d": "",
        "310-09d": "",
        "311-09d": "",
        "312-09d": "",
        "313-09d": "",
        "314-09d": "",
        "321-09d": "",
        # Group 5xx: Rain
        "500-10d": "",
        "501-10d": "",
        "502-10d": "",
        "503-10d": "j",
        "504-10d": "",
        "511-13d": "",
        "520-09d": "",
        "521-09d": "",
        "522-09d": "",
        "531-09d": "",
        # Group 6xx: Snow
        "600-13d": "",
        "601-13d": "",
        "602-13d": "",
        "611-13d": "",
        "612-13d": "",
        "613-13d": "",
        "615-13d": "",
        "616-13d": "",
        "620-13d": "",
        "621-13d": "",
        "622-13d": "",
        # Group 7xx: Atmosphere
        "701-50d": "",
        "711-50d": "",
        "721-50d": "",
        "731-50d": "",
        "741-50d": "",
        "751-50d": "",
        "761-50d": "",
        "762-50d": "",
        "771-50d": "",
        "781-50d": "",
        # Group 800: Clear
        "800-01d": "",
        "800-01n": "",
        # Group 80x: Clouds
        "801-02d": "",
        "801-02n": "",
        "802-03d": "",
        "802-03n": "",
        "803-04d": "",
        "803-04n": "",
        "804-05d": "",
        "804-05n": "",
    }
    try:
        with open(cache_file, "r") as f:
            data = json.load(f)

        # Obtener id y icon
        weather_id = data.get("id")
        weather_icon = data.get("icon")

        # Construir la clave para buscar el icono
        key = f"{weather_id}-{weather_icon}"

        # Buscar el icono en el diccionario
        weather_icon = icons.get(key, None)

        # Si se encuentra el icono, imprimirlo
        if weather_icon:
            print(weather_icon)
        else:
            print("Icono no encontrado.")
    except FileNotFoundError:
        print("El archivo JSON no se encuentra.")
    except json.JSONDecodeError:
        print("Error al leer el archivo JSON.")


def printQuote():
    # Leer los datos del archivo JSON
    cache_file = get_cache_file_path()

    quotes = {
        "50d": "El pronóstico dice que hay niebla",
        "50n": "El pronóstico dice que es una noche brumosa.",
        "01d": "¡Es un día soleado, será divertido!",
        "01n": "Es una noche clara",
        "02d": "Está nublado, algo sombrío.",
        "02n": "Es una noche nublada",
        "03d": "Está nublado, algo sombrío.",
        "03n": "Es una noche nublada",
        "04d": "Está nublado, algo sombrío.",
        "04n": "Es una noche nublada",
        "09d": "¡Está lloviendo, es un gran día",
        "09n": "Parece que va a llover esta noche.",
        "10d": "¡Está lloviendo, es un gran día",
        "10n": "Parece que va a llover esta noche.",
        "11d": "Hoy se pronostica tormenta",
        "11n": "Esta noche habrá tormentas",
        "13d": "Va a nevar hoy",
        "13n": "Va a nevar esta noche",
        "40d": "El pronóstico dice que hay niebla.",
        "40n": "El pronóstico dice que es una noche brumosa",
    }

    try:
        with open(cache_file, "r") as f:
            data = json.load(f)

        # Obtener el icono del clima
        weather_icon = data.get("icon")

        # Obtener la cita correspondiente al icono
        quote = quotes.get(weather_icon, None)

        # Si se encuentra la cita, imprimir
        if quote:
            print(quote)
        else:
            print("Cita no encontrada.")
    except FileNotFoundError:
        print("El archivo JSON no se encuentra.")
    except json.JSONDecodeError:
        print("Error al leer el archivo JSON.")


def printQuoteTwo():
    # Leer los datos del archivo JSON
    cache_file = get_cache_file_path()

    quotes = {
        "50d": "Asegúrate de no perderte en el camino...",
        "50n": "No vayas a ningún lado esta noche o podrías perderte...",
        "01d": "Pero no vayas a vagar solo...",
        "01n": "Quizás quieras dar un paseo nocturno para relajarte...",
        "02d": "Será mejor que consigas un libro para leer...",
        "02n": "¿Qué tal un chocolate caliente y una cama calentita?",
        "03d": "Será mejor que consigas un libro para leer...",
        "03n": "¿Qué tal un chocolate caliente y una cama calentita?",
        "04d": "Será mejor que consigas un libro para leer...",
        "04n": "¿Qué tal un chocolate caliente y una cama calentita?",
        "09d": "Consigue un poco de ramen y mira cómo cae la lluvia...",
        "09n": "Asegúrate de que tu ropa no esté todavía afuera...",
        "10d": "Consigue un poco de ramen y mira cómo cae la lluvia...",
        "10n": "Asegúrate de que tu ropa no esté todavía afuera...",
        "11d": "Asegúrate de no quedarte impresionado...",
        "11n": "Asegúrate de estar abrigado en la cama y que las ventanas estén cerradas...",
        "13d": "¡Será mejor que uses ropa gruesa y hagas un muñeco de nieve también!",
        "13n": "Asegúrate de levantarte temprano mañana para ver los lugares de interés...",
        "40d": "Asegúrate de no perderte en el camino...",
        "40n": "No vayas a ningún lado esta noche o podrías perderte...",
    }

    try:
        with open(cache_file, "r") as f:
            data = json.load(f)

        # Obtener el icono del clima
        weather_icon = data.get("icon")

        # Obtener la cita correspondiente al icono
        quote = quotes.get(weather_icon, None)

        # Si se encuentra la cita, imprimir
        if quote:
            print(quote)
        else:
            print("Cita no encontrada.")
    except FileNotFoundError:
        print("El archivo JSON no se encuentra.")
    except json.JSONDecodeError:
        print("Error al leer el archivo JSON.")


def main():
    # Crear el parser de argumentos
    parser = argparse.ArgumentParser(
        description="Script para obtener datos climáticos, guardarlos en un archivo JSON y mostrar diferentes estadísticas."
    )
    parser.add_argument(
        "--savedata",
        action="store_true",
        help="Guardar los datos climáticos en un archivo JSON.",
    )
    parser.add_argument(
        "--printcitycountry",
        action="store_true",
        help="Imprimir ciudad y país desde el archivo JSON.",
    )
    parser.add_argument(
        "--printextrastats",
        action="store_true",
        help="Imprimir estadísticas adicionales desde el archivo JSON.",
    )
    parser.add_argument(
        "--printtemperature",
        action="store_true",
        help="Imprimir la temperatura desde el archivo JSON.",
    )
    parser.add_argument(
        "--printweathericon",
        action="store_true",
        help="Imprimir el identificador y el icono del clima desde el archivo JSON.",
    )
    parser.add_argument(
        "--printquote",
        action="store_true",
        help="Imprimir una cita relacionada con el clima.",
    )
    parser.add_argument(
        "--printquotetwo",
        action="store_true",
        help="Imprimir otra cita relacionada con el clima.",
    )
    parser.add_argument(
        "--printdescription",
        action="store_true",
        help="Imprimir la descripción del clima desde el archivo JSON.",
    )

    # Parsear los argumentos
    args = parser.parse_args()

    # Si se pasó el argumento --savedata, ejecutar la función de guardar datos
    if args.savedata:
        datos_climaticos = obtener_datos_climaticos()
        if datos_climaticos:
            guardar_datos_en_cache(datos_climaticos)
        else:
            print("No se pudieron obtener los datos climáticos.")
    elif args.printcitycountry:
        printCityCountry()
    elif args.printextrastats:
        printExtraStats()
    elif args.printtemperature:
        printTemperature()
    elif args.printweathericon:
        printWeatherIcon()
    elif args.printquote:
        printQuote()
    elif args.printquotetwo:
        printQuoteTwo()
    elif args.printdescription:
        printDescription()
    else:
        print(
            "No se especificó ninguna acción. Usa --savedata para guardar los datos climáticos en un archivo JSON, --printcitycountry para imprimir ciudad y país, --printextrastats para imprimir estadísticas adicionales, --printtemperature para imprimir la temperatura, --printweathericon para imprimir el identificador y el icono del clima, --printquote para imprimir una cita relacionada con el clima, --printdescription para imprimir la descripción del clima, o --printquotetwo para imprimir otra cita relacionada con el clima."
        )


if __name__ == "__main__":
    main()
